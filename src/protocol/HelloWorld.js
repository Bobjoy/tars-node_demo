// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "HelloWorld.tars" by Server Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;

var DEMO = DEMO || {};
module.exports.DEMO = DEMO;

DEMO.CommonRsp = function() {
    this.code = 0;
    this.message = "";
    this.data = "";
    this._classname = "DEMO.CommonRsp";
};
DEMO.CommonRsp._classname = "DEMO.CommonRsp";
DEMO.CommonRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DEMO.CommonRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DEMO.CommonRsp._readFrom = function (is) {
    var tmp = new DEMO.CommonRsp;
    tmp.code = is.readInt32(0, true, 0);
    tmp.message = is.readString(1, false, "");
    tmp.data = is.readString(2, false, "");
    return tmp;
};
DEMO.CommonRsp.prototype._writeTo = function (os) {
    os.writeInt32(0, this.code);
    os.writeString(1, this.message);
    os.writeString(2, this.data);
};
DEMO.CommonRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DEMO.CommonRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DEMO.CommonRsp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "message" : this.message,
        "data" : this.data
    };
};
DEMO.CommonRsp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "message") && (this.message = json.message);
    _hasOwnProperty.call(json, "data") && (this.data = json.data);
    return this;
};
DEMO.CommonRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DEMO.CommonRsp.new = function () {
    return new DEMO.CommonRsp();
};
DEMO.CommonRsp.create = function (is) {
    return DEMO.CommonRsp._readFrom(is);
};

DEMO.HelloReq = function() {
    this.username = "";
    this._classname = "DEMO.HelloReq";
};
DEMO.HelloReq._classname = "DEMO.HelloReq";
DEMO.HelloReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DEMO.HelloReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DEMO.HelloReq._readFrom = function (is) {
    var tmp = new DEMO.HelloReq;
    tmp.username = is.readString(0, false, "");
    return tmp;
};
DEMO.HelloReq.prototype._writeTo = function (os) {
    os.writeString(0, this.username);
};
DEMO.HelloReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DEMO.HelloReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DEMO.HelloReq.prototype.toObject = function() { 
    return {
        "username" : this.username
    };
};
DEMO.HelloReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "username") && (this.username = json.username);
    return this;
};
DEMO.HelloReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DEMO.HelloReq.new = function () {
    return new DEMO.HelloReq();
};
DEMO.HelloReq.create = function (is) {
    return DEMO.HelloReq._readFrom(is);
};

DEMO.WorldReq = function() {
    this.destination = "";
    this._classname = "DEMO.WorldReq";
};
DEMO.WorldReq._classname = "DEMO.WorldReq";
DEMO.WorldReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DEMO.WorldReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DEMO.WorldReq._readFrom = function (is) {
    var tmp = new DEMO.WorldReq;
    tmp.destination = is.readString(0, false, "");
    return tmp;
};
DEMO.WorldReq.prototype._writeTo = function (os) {
    os.writeString(0, this.destination);
};
DEMO.WorldReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DEMO.WorldReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DEMO.WorldReq.prototype.toObject = function() { 
    return {
        "destination" : this.destination
    };
};
DEMO.WorldReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "destination") && (this.destination = json.destination);
    return this;
};
DEMO.WorldReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DEMO.WorldReq.new = function () {
    return new DEMO.WorldReq();
};
DEMO.WorldReq.create = function (is) {
    return DEMO.WorldReq._readFrom(is);
};

DEMO.HelloWorldImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
};

DEMO.HelloWorldImp.prototype.initialize = function () {};

DEMO.HelloWorldImp.prototype.onDispatch = function (current, funcName, binBuffer) { 
    if ("__" + funcName in this) {
        return this["__" + funcName](current, binBuffer);
    } else {
        return TarsError.SERVER.FUNC_NOT_FOUND;
    }
};

var __DEMO_HelloWorld$tars_ping$RE = function (_ret) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);

        this.doResponse(tup.encode());
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);

        this.doResponse(os.getBinBuffer());
    }
};

DEMO.HelloWorldImp.prototype.__tars_ping = function (current) {
    __DEMO_HelloWorld$tars_ping$RE.call(current, 0);

    return TarsError.SUCCESS;
};

DEMO.HelloWorldImp.prototype.sayHello = function () {
    assert.fail("sayHello function not implemented");
};

var __DEMO_HelloWorld$sayHello$RE = function (_ret, rsp) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);
        tup.writeStruct("rsp", rsp);

        this.doResponse(tup.encode());
    } else if (this.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = {};
        _data_["tars_ret"] = _ret;
        _data_["rsp"] = rsp.toObject ? rsp.toObject() : rsp;

         this.doResponse(new TarsStream.BinBuffer(Buffer.from(JSON.stringify(_data_))));
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);
        os.writeStruct(2, rsp);

        this.doResponse(os.getBinBuffer());
    }
};

DEMO.HelloWorldImp.prototype.__sayHello = function (current, binBuffer) {
    var req = null;
    var rsp = null;

    if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = current.getRequestVersion();
        tup.decode(binBuffer);
        req = tup.readStruct("req", DEMO.HelloReq);
        rsp = tup.readStruct("rsp", DEMO.CommonRsp, new DEMO.CommonRsp);
    } else if (current.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = JSON.parse(binBuffer.toNodeBuffer());
        req = _data_.req;
        rsp = _data_.rsp || new DEMO.CommonRsp;
    } else {
        var is = new TarsStream.TarsInputStream(binBuffer);
        req = is.readStruct(1, true, DEMO.HelloReq);
        rsp = is.readStruct(2, false, DEMO.CommonRsp);
    }

    current.sendResponse = __DEMO_HelloWorld$sayHello$RE;

    this.sayHello(current, req, rsp);

    return TarsError.SUCCESS;
};

DEMO.HelloWorldImp.prototype.goWorld = function () {
    assert.fail("goWorld function not implemented");
};

var __DEMO_HelloWorld$goWorld$RE = function (_ret, rsp) {
    if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = this.getRequestVersion();
        tup.writeInt32("", _ret);
        tup.writeStruct("rsp", rsp);

        this.doResponse(tup.encode());
    } else if (this.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = {};
        _data_["tars_ret"] = _ret;
        _data_["rsp"] = rsp.toObject ? rsp.toObject() : rsp;

         this.doResponse(new TarsStream.BinBuffer(Buffer.from(JSON.stringify(_data_))));
    } else {
        var os = new TarsStream.TarsOutputStream();
        os.writeInt32(0, _ret);
        os.writeStruct(2, rsp);

        this.doResponse(os.getBinBuffer());
    }
};

DEMO.HelloWorldImp.prototype.__goWorld = function (current, binBuffer) {
    var req = null;
    var rsp = null;

    if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
        var tup = new TarsStream.UniAttribute();
        tup.tupVersion = current.getRequestVersion();
        tup.decode(binBuffer);
        req = tup.readStruct("req", DEMO.WorldReq);
        rsp = tup.readStruct("rsp", DEMO.CommonRsp, new DEMO.CommonRsp);
    } else if (current.getRequestVersion() === TarsStream.Tup.JSON_VERSION) {
        var _data_ = JSON.parse(binBuffer.toNodeBuffer());
        req = _data_.req;
        rsp = _data_.rsp || new DEMO.CommonRsp;
    } else {
        var is = new TarsStream.TarsInputStream(binBuffer);
        req = is.readStruct(1, true, DEMO.WorldReq);
        rsp = is.readStruct(2, false, DEMO.CommonRsp);
    }

    current.sendResponse = __DEMO_HelloWorld$goWorld$RE;

    this.goWorld(current, req, rsp);

    return TarsError.SUCCESS;
};





